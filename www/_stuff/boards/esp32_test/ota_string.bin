from aiohttp import web
import os
import json
import datetime
import hashlib


async def handle(request):
    name = request.match_info.get('name', "Anonymous")
    text = "Hello, " + name
    return web.Response(text=text)

vfsfile = 'ota.tar'
chunk_size = 512

async def updatemeta(request):
	res = []


# web.get('/', handle),
# web.get('/{name}', handle),
# async def updatemeta(request):
# res = []
# 	res['update'] = {}
# 	res['update']['vfs'] = {'url': '{}/chunk/vfs'.format(otahost), 'size': int(os.stat(vfsfile).st_size), 'hash': hashlib.sha256(open(vfsfile, 'rb').read()).hexdigest()}
# 	print(res)
# 	return web.Response(json.dumps(res))


app = web.Application()
app.add_routes([web.get('/', handle),
                web.get('/{name}', handle),
				web.get('/updatemeta', updatemeta),

				])

web.run_app(app)


# from bottle import route, run, response, request, url, debug
# import os
# import json
# import datetime
# import hashlib
#
# partfile = 'ota.img'
# vfsfile = 'ota.tar'
# otahost = 'http://10.42.0.1:8000'
# chunk_size = 512
#
# do_update = False
#
# @route('/updatemeta', method=['POST', 'GET'])
# def trackerprobe():
# 	if do_update:
# 		res['update'] = {}
# 		res['update']['partition'] = {'url': '{}/chunk/part'.format(otahost), 'size': int(os.stat(partfile).st_size), 'hash': hashlib.sha256(open(partfile, 'rb').read()).hexdigest()}
# 		res['update']['vfs'] = {'url': '{}/chunk/vfs'.format(otahost), 'size': int(os.stat(vfsfile).st_size), 'hash': hashlib.sha256(open(vfsfile, 'rb').read()).hexdigest()}
# 	print(res)
# 	return json.dumps(res)
#
#
# @route('/chunk/<type>/<id:int>', name='chunk_id')
# @route('/chunk/<type>/', name='chunk')
# def chunk(type, id=0):
# 	path = None
# 	if type == 'part':
# 		path = partfile
# 	elif type == 'vfs':
# 		path = vfsfile
# 	if path:
# 		f = open(path, 'rb')
# 		f.seek(chunk_size*id)
# 		data = f.read(chunk_size)
# 		f.close()
# 		response.set_header('Content-type', 'application/octet-stream')
# 		print('type {}, chunk {}'.format(type, id))
# 		return data
# 	else:
# 		return None


# import asyncio
# import logging
# from aiohttp import web
#
#
# async def get_index(req):
#     """ get the analytics results """
#     return web.json_response({'ok': True})
#
#
# def main():
#     """ the main application start """
#
#     # the the main event loop
#     loop = asyncio.get_event_loop()
#
#     # create the main web app
#     app = web.Application(loop=loop)
#
#     # add analytics routes
#     app.router.add_get('/v1/analytics', get_index)
#     app.router.add_get('/v2/analytics', get_index)
#
#     logging.basicConfig(level=logging.DEBUG)
#
#     # start the application
#     web.run_app(app, host='0.0.0.0', port=8080)
#
#
# if __name__ == '__main__':
#     main()

from aiohttp import web, log
import aiohttp
import os
import json
import datetime
import hashlib

import logging
logging.basicConfig(level=logging.DEBUG)

logger = logging.getLogger('aiohttp.debug')
log_access = logging.getLogger('aiohttp.access')
log_client = logging.getLogger('aiohttp.client')
log_internal = logging.getLogger('aiohttp.internal')
log_server = logging.getLogger('aiohttp.server')
log_web = logging.getLogger('aiohttp.web')
log_websocket = logging.getLogger('aiohttp.websocket')


# class LoggingClientSession(aiohttp.ClientSession):
#
#     def request(self, method, url, **kwargs):
#         logger.debug('Starting request <%s %r>', method, url)
#         return super().request(method, url, **kwargs)


# log.access_logger

# log = logging.getLogger('aiohttp.access')
# log.setLevel(logging.DEBUG)


#

# access_log_class: Type[AbstractAccessLogger] = AccessLogger,
# access_log_format: str = AccessLogger.LOG_FORMAT,
# access_log: logging.Logger = access_logger,
async def handle(request):
    name = request.match_info.get('name', "Anonymous")
    text = "Hello, " + name
    return web.Response(text=text)

vfsfile = 'ota.tar'
chunk_size = 512
otahost = "http://192.168.100.173:8080/"

async def updatemeta(request):
    res = {}
    res['update'] = {'ok': True}
    # res['update']['vfs'] = {'url': '{}/chunk/vfs'.format(otahost), 'size': int(os.stat(vfsfile).st_size),
    #                         'hash': hashlib.sha256(open(vfsfile, 'rb').read()).hexdigest()}
    print(res)
    res_q = json.dumps(res)
    return web.json_response(res_q)


app = web.Application()
app.add_routes([web.get('/updatemeta', updatemeta)])
# app.router.add_route('GET', '/updatemeta', updatemeta)

# app.add_routes([
#     web.get('/{updatemeta}', updatemeta),
# ])


web.run_app(app)
